{"name": "Очистить корзину", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "@allure.epic(\"Тестирование API\")\n    @allure.feature(\"Позитивные проверки\")\n    @allure.title(\"Очистить корзину\")\n    @allure.description(\"В результате теста проверяется что после очистки корзины,\\\n        при запросе ее содержимого возвращался пустой список\")\n    @allure.severity(\"critical\")\n    def test_positive_delete_cart():\n        with allure.step(\"Создать объект класса ApiClass\"):\n            api = ApiClass()\n        with allure.step(\"Очистить корзину\"):\n            api.delete_cart()\n        with allure.step(\"Запросить список ID товаров в наличии\"):\n>           list_id_items = api.get_all_id_items_can_buy()\n\ntests\\test_api.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\class_for_tests\\ApiClass.py:45: in get_all_id_items_can_buy\n    data = json.loads(request)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py:344: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x000001C651B906E0>\ns = '<!DOCTYPE html><html><head><title>DDoS-Guard</title><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device...<span id=\"request-info\"></span></div></div><script src=\"/.well-known/ddos-guard/geoblocked.js\"></script></body></html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py:362: JSONDecodeError"}, "description": "В результате теста проверяется что после очистки корзины,    при запросе ее содержимого возвращался пустой список", "steps": [{"name": "Создать объект класса ApiClass", "status": "passed", "start": 1738055840951, "stop": 1738055840951}, {"name": "Очистить корзину", "status": "passed", "steps": [{"name": "Создать объект класса DataForTests", "status": "passed", "start": 1738055840951, "stop": 1738055840951}, {"name": "Создать объект класса ApiClass", "status": "passed", "steps": [{"name": "Добавить headers", "status": "passed", "attachments": [{"name": "Используемый токен", "source": "31a0e2c3-5de0-4ead-ad34-c05b39b3aee8-attachment.attach"}, {"name": "Передаваемые headers", "source": "59f44cac-803a-4cc5-9c79-8fb807511a1f-attachment.attach"}], "start": 1738055840951, "stop": 1738055840953}], "start": 1738055840951, "stop": 1738055840953}, {"name": "Создать запрос для очищения корзины", "status": "passed", "start": 1738055840953, "stop": 1738055841083}], "start": 1738055840951, "stop": 1738055841084}, {"name": "Запросить список ID товаров в наличии", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"c:\\Users\\DEXP\\Desktop\\Diploma work on automation\\Diploma-work-on-automation\\tests\\test_api.py\", line 69, in test_positive_delete_cart\n    list_id_items = api.get_all_id_items_can_buy()\n  File \"C:\\Users\\DEXP\\Desktop\\Diploma work on automation\\Diploma-work-on-automation\\tests\\class_for_tests\\ApiClass.py\", line 45, in get_all_id_items_can_buy\n    data = json.loads(request)\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n           ~~~~~~~~~~~~~~~~~~~~~~~^^^\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py\", line 344, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py\", line 362, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n"}, "steps": [{"name": "Создать объект класса DataForTests", "status": "passed", "start": 1738055841084, "stop": 1738055841084}, {"name": "Создать объект класса ApiClass", "status": "passed", "steps": [{"name": "Добавить headers", "status": "passed", "attachments": [{"name": "Используемый токен", "source": "4ff73f03-4a30-4fa5-bb29-b01bdabd7f91-attachment.attach"}, {"name": "Передаваемые headers", "source": "e1097ad9-7556-4b80-b8ee-4751b32bd524-attachment.attach"}], "start": 1738055841084, "stop": 1738055841089}], "start": 1738055841084, "stop": 1738055841089}, {"name": "Создать запрос на получение списка всех продуктов", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"C:\\Users\\DEXP\\Desktop\\Diploma work on automation\\Diploma-work-on-automation\\tests\\class_for_tests\\ApiClass.py\", line 45, in get_all_id_items_can_buy\n    data = json.loads(request)\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n           ~~~~~~~~~~~~~~~~~~~~~~~^^^\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py\", line 344, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py\", line 362, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n"}, "start": 1738055841089, "stop": 1738055841239}], "start": 1738055841084, "stop": 1738055841244}], "start": 1738055840951, "stop": 1738055841249, "uuid": "4474509e-6903-4d6f-87f3-ee758b6281b9", "historyId": "b82ced3c97e34fdbad065b3048075a74", "testCaseId": "b82ced3c97e34fdbad065b3048075a74", "fullName": "tests.test_api#test_positive_delete_cart", "labels": [{"name": "feature", "value": "Позитивные проверки"}, {"name": "epic", "value": "Тестирование API"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-Q56RGJ9"}, {"name": "thread", "value": "19096-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}