{"name": "Получить карточку товара", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "@allure.epic(\"Тестирование API\")\n    @allure.feature(\"Позитивные проверки\")\n    @allure.title(\"Получить карточку товара\")\n    @allure.description(\"В результате теста проверяется что обязательные поля\\\n        присутствуют в ответе от сервера в карточе товара\")\n    @allure.severity(\"critical\")\n    def test_positive_get_product_card():\n        with allure.step(\"Создать объект класса ApiClass\"):\n            api = ApiClass()\n        with allure.step(\"Получить список всех URL товаров в наличии\"):\n>           all_url = api.get_all_url_items_can_buy()\n\ntests\\test_api.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\class_for_tests\\ApiClass.py:127: in get_all_url_items_can_buy\n    data = json.loads(request)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py:344: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x000001C651B906E0>\ns = '<!DOCTYPE html><html><head><title>DDoS-Guard</title><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device...<span id=\"request-info\"></span></div></div><script src=\"/.well-known/ddos-guard/geoblocked.js\"></script></body></html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py:362: JSONDecodeError"}, "description": "В результате теста проверяется что обязательные поля    присутствуют в ответе от сервера в карточе товара", "steps": [{"name": "Создать объект класса ApiClass", "status": "passed", "start": 1738055840211, "stop": 1738055840211}, {"name": "Получить список всех URL товаров в наличии", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"c:\\Users\\DEXP\\Desktop\\Diploma work on automation\\Diploma-work-on-automation\\tests\\test_api.py\", line 17, in test_positive_get_product_card\n    all_url = api.get_all_url_items_can_buy()\n  File \"C:\\Users\\DEXP\\Desktop\\Diploma work on automation\\Diploma-work-on-automation\\tests\\class_for_tests\\ApiClass.py\", line 127, in get_all_url_items_can_buy\n    data = json.loads(request)\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n           ~~~~~~~~~~~~~~~~~~~~~~~^^^\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py\", line 344, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py\", line 362, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n"}, "steps": [{"name": "Создать объект класса DataForTests", "status": "passed", "start": 1738055840211, "stop": 1738055840211}, {"name": "Создать объект класса ApiClass", "status": "passed", "steps": [{"name": "Добавить headers", "status": "passed", "attachments": [{"name": "Используемый токен", "source": "a67aaee7-3198-44fd-accb-210fa1d5aca7-attachment.attach"}, {"name": "Передаваемые headers", "source": "d722c184-189c-428f-808b-5b5d59647086-attachment.attach"}], "start": 1738055840211, "stop": 1738055840213}], "start": 1738055840211, "stop": 1738055840213}, {"name": "Создать запрос для получения всех товаров", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"C:\\Users\\DEXP\\Desktop\\Diploma work on automation\\Diploma-work-on-automation\\tests\\class_for_tests\\ApiClass.py\", line 127, in get_all_url_items_can_buy\n    data = json.loads(request)\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n           ~~~~~~~~~~~~~~~~~~~~~~~^^^\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py\", line 344, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\DEXP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py\", line 362, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n"}, "start": 1738055840213, "stop": 1738055840417}], "start": 1738055840211, "stop": 1738055840500}], "start": 1738055840210, "stop": 1738055840501, "uuid": "50a56ad0-a4ab-4bc7-8b31-1d6e9a869d5a", "historyId": "0e00bbc541400ca06e3ac68367e74820", "testCaseId": "0e00bbc541400ca06e3ac68367e74820", "fullName": "tests.test_api#test_positive_get_product_card", "labels": [{"name": "feature", "value": "Позитивные проверки"}, {"name": "epic", "value": "Тестирование API"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-Q56RGJ9"}, {"name": "thread", "value": "19096-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}